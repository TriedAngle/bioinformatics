# Experiments

```elixir
Mix.install([
  {:httpoison, "~> 2.2.1"},
  {:jason, "~> 1.4"},
  {:kino, "~> 0.12.0"},
  {:biolex, path: Path.dirname(__ENV__.file) <> "/biolex"}
])
```

## Config

```elixir
notebook_path = Path.dirname(__ENV__.file) <> "/"
```

```elixir
alias Biolex.NCBI, as: NCBI
alias Biolex.Fasta, as: Fasta
{:ok, env} = Biolex.Env.reload(notebook_path <> ".env")
env
```

<!-- livebook:{"branch_parent_index":0} -->

## Download from Search

```elixir
{:ok, json, {web_env, query_key, _ids}} =
  NCBI.search(~s("timeless"[Gene Name] AND insects[Organism]), db: "protein", retmax: 200)

{web_env, query_key}
```

```elixir
{:ok, fasta} = NCBI.fetch(webenv: web_env, query_key: query_key, db: "protein", retmax: 200)
fasta
```

```elixir
File.write(notebook_path <> "result.fasta", fasta)
```

<!-- livebook:{"branch_parent_index":0} -->

## Download from Gene id

```elixir
defmodule Runner do
  def download_sequence(gene_id, :nucleotid) do
    {:ok, ids} = NCBI.get_links(gene_id, "gene", "nuccore", "gene_nuccore")

    Task.async_stream(
      ids,
      fn id ->
        {:ok, fasta} = NCBI.get_sequence(id)
        fasta
      end,
      timeout: :infinity
    )
    |> Enum.map(fn {:ok, fasta} ->
      {:ok, parse} = Fasta.parse(fasta)
      parse
    end)
    |> Enum.to_list()
  end

  def download_sequence(gene_id, :protein) do
    {:ok, ids} = NCBI.get_links(gene_id, "gene", "protein", "gene_protein")

    Task.async_stream(
      ids,
      fn id ->
        {:ok, fasta} = NCBI.get_sequence(id, "protein")
        fasta
      end,
      timeout: :infinity
    )
    |> Enum.map(fn {:ok, fasta} ->
      {:ok, parse} = Fasta.parse(fasta)
      parse
    end)
    |> Enum.to_list()
  end
end
```

```elixir
fastas = Runner.download_sequence("113500526", :nucleotid)
```

```elixir
fastas = Runner.download_sequence("113500526", :protein)
```

```elixir
display = Kino.Frame.new()

form =
  Kino.Control.form(
    [name: Kino.Input.text("NBCI Gene ID")],
    submit: "Submit"
  )

output = Kino.Frame.new()
Kino.Frame.append(display, form)
Kino.Frame.append(display, output)

Kino.listen(form, fn event ->
  id = event[:data][:name]

  start_time = System.monotonic_time()
  Kino.Frame.render(output, "Loading...")

  res = Runner.download_sequence(id, :nucleotid)

  end_time = System.monotonic_time()
  elapsed_time = System.convert_time_unit(end_time - start_time, :native, :millisecond)

  Kino.Frame.clear(output)
  Kino.Frame.append(output, "Done... #{elapsed_time}ms")
  Kino.Frame.append(output, res)

  # Agent.update(agent, fn _ -> res end)
end)

# example 113500526
display
```

```elixir
form =
  Kino.Control.form(
    [
      name: Kino.Input.text("Name")
    ],
    submit: "Submit"
  )

Kino.listen(form, fn event ->
  IO.inspect(Agent.get(agent, fn state -> state end))
  IO.inspect(event)
end)

form
```
